import { DBProcedure, UbiquitousConcept} from "../types";

const proceduresUbiquitousConcepts:Record<DBProcedure,Array<UbiquitousConcept>> = {
generate_user:['userId','time','userName','pwd'],
generate_user_event:['userId','time','key'],
generate_artist:['artistId','time','userId'],
generate_artist_event:['artistId','time','key'],
generate_work:['workId','artistId','time','workName'],
generate_work_event:['workId','time','key'],
generate_user_artist:['userArtistId','userId','artistId','time'],
generate_user_artist_event:['userArtistId','time','key'],
generate_user_work:['userWorkId','userId','workId','time'],
generate_user_work_event:['userWorkId','time','key'],
insert_user_event:['userId','time','key'],
insert_artist:['artistId','time','userId'],
insert_artist_event:['artistId','time','key'],
insert_work:['workId','artistId','time','workName'],
insert_user:['userId','time','userName','pwd'],
insert_work_event:['workId','time','key'],
insert_user_artist:['userArtistId','userId','artistId','time'],
insert_user_artist_event:['userArtistId','time','key'],
insert_user_work:['userWorkId','userId','workId','time'],
insert_user_work_event:['userWorkId','time','key'],
check_signin : ['userName','pwd'],
check_signup : ['userName','pwd','confirmedPwd'],
see_my_watchers:['artistId'],
see_more_users:['artistId'],
see_my_works:['artistId'],
see_more_of_my_works:['artistId'],
see_my_watched_artists:['userId'],
see_more_artists:['userId'],
see_my_liked_works:['userId'],
see_more_works:['userId'],
view_user:['artistId','userId'],
view_artist:['artistId','userId'],
view_works_of_artists:['artistId','userId'],
view_work:['userId','workId'],
ban_watcher:['artistId','userId'],
submit_work:['artistId','workName'],
withdraw_work:['artistId','workId'],
submit_first_work:['userId','workName'],
watch_artist:['userId','artistId'],
unwatch_artist:['userId','artistId'],
like_work:['userId','workId'],
unlike_work:['userId','workId'],
insert_into_requests_logs:['time','path','methods'],
insert_into_responses_logs:['time','path','methods','error'],
insert_into_errors_logs:['time','path','methods','error'],
select_full_logs:[]}

const flowingConceptSource:Record<UbiquitousConcept,Array<string>> =  {
    userId:['session','params'],
    time:['unit'],
    userName:['params'],
    pwd:['params'],
    key:['route'],
    artistId:['session','params'],
    workId:['params'],
    workName:['params'],
    userArtistId:['params'],
    userWorkId:['params'],
}

export {proceduresUbiquitousConcepts,flowingConceptSource };